{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"React Query Hook": {
    "prefix": "rqq",
    "description": "React Query Hook",
    "body": [
      "export const use${1} = () =>",
      "  useQuery({",
      "    queryKey: ['${2}'],",
      "    queryFn: async () => {",
      "      const res = await ${3}();",
      "      return res.${4};",
      "    },",
      "    onError: (err: ApiResponseError) => {",
      "      showNotification({",
      "        message: err.message,",
      "        color: 'red',",
      "      });",
      "    },",
      "  });",
    ]
  },
  "React Query Mutation Hook": {
    "prefix": "rqm",
    "description": "React Query Mutation Hook",
    "body": [
      "export const use${1} = () => {",
      "  const queryClient = useQueryClient();",
      "",
      "  return useMutation<${2}, ${3}, ${4}>({",
      "    mutationFn: async payload => {",
      "      const res = await ${5}(payload);",
      "      return res.data.${6};",
      "    },",
      "    onSuccess: () => {",
      "      queryClient.invalidateQueries(['${7}']);",
      "    },",
      "    onError: err => {",
      "      showNotification({",
      "        message: err.message,",
      "        color: 'red',",
      "      });",
      "    },",
      "  });",
      "};",
    ]
  }
}