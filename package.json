{
	"name": "inline-fold",
	"displayName": "Inline fold",
	"description": "A custom decorator that \"fold\" matching content in single line",
	"icon": "res/icon.png",
	"version": "0.1.8",
	"publisher": "moalamri",
	"homepage": "https://github.com/moalamri/vscode-inline-fold",
	"bugs": "https://github.com/moalamri/vscode-inline-fold/issues",
	"license": "MIT",
	"repository": {
		"type": "git",
		"url": "https://github.com/moalamri/vscode-inline-fold"
	},
	"engines": {
		"vscode": "^1.68.1"
	},
	"categories": [
		"Visualization",
		"Other"
	],
	"activationEvents": [
		"onStartupFinished"
	],
	"main": "./out/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "inlineInjectorIdFold.toggle",
				"title": "Toggle inline fold"
			}
		],
		"configuration": {
			"type": "object",
			"title": "Inline fold settings",
			"properties": {
				"inlineInjectorIdFold.supportedLanguages": {
					"type": "array",
					"order": 0,
					"description": "Supported languages",
					"items": {
						"type": "string",
						"description": "Language Ids: https://code.visualstudio.com/docs/languages/identifiers#_known-language-identifiers"
					},
					"minItems": 1,
					"default": [
						"javascript",
						"typescript",
						"javascriptreact",
						"typescriptreact",
						"markdown",
						"prisma",
						"php"
					]
				},
				"inlineInjectorIdFold.regex": {
					"type": "string",
					"order": 1,
					"description": "Regex to match",
					"default": "(/\\*\\* @injector-id: )([a-zA-Z0-9-\\s])* \\*/",
					"examples": [
						"(class|className)=[`'{\"]([^`'\"}]+)[`'\"}]",
						"class=\"([a-zA-Z0-9-\\s]+)(?=\")",
						"id=\"([a-zA-Z0-9-\\s]+)(?=\")",
						"(/\\*\\* @injector-id: )([a-zA-Z0-9-\\s])* \\*/"
					]
				},
				"inlineInjectorIdFold.regexValue": {
					"type": "string",
					"order": 1,
					"description": "Regex to match",
					"default": "(/\\*\\* @injector-start:|/\\*\\* @injector-stop: )([a-zA-Z0-9-\\s])* \\*/",
					"examples": [
						"(class|className)=[`'{\"]([^`'\"}]+)[`'\"}]",
						"class=\"([a-zA-Z0-9-\\s]+)(?=\")",
						"id=\"([a-zA-Z0-9-\\s]+)(?=\")",
						"(/\\*\\* @injector-start: )([a-zA-Z0-9-\\s])* \\*/"
					]
				},
				"inlineInjectorIdFold.regexFlags": {
					"type": "string",
					"order": 2,
					"description": "Regex flags",
					"default": "g",
					"examples": [
						"g",
						"gi"
					]
				},
				"inlineInjectorIdFold.regexGroup": {
					"type": "string",
					"order": 3,
					"description": "Regex capturing group number that will be folded",
					"default": "2",
					"examples": [
						"1",
						"2"
					]
				},
				"inlineInjectorIdFold.maskChar": {
					"type": "string",
					"order": 4,
					"description": "The mask that covers the folded text",
					"default": "◦◦◦",
					"examples": [
						"◦◦◦",
						"▶▶▶",
						"⌨"
					]
				},
				"inlineInjectorIdFold.maskCharValue": {
					"type": "string",
					"order": 4,
					"description": "The mask that covers the folded text",
					"default": "◦◦◦",
					"examples": [
						"◦◦◦",
						"▶▶▶",
						"⌨"
					]
				},
				"inlineInjectorIdFold.maskColor": {
					"type": "string",
					"order": 5,
					"description": "The color of the covering mask in hex",
					"default": "#d0d768",
					"examples": [
						"#68D7AC",
						"#FF0000",
						"#d0d768"
					]
				},
				"inlineInjectorIdFold.maskColorValue": {
					"type": "string",
					"order": 5,
					"description": "The color of the covering mask in hex",
					"default": "#68D7AC",
					"examples": [
						"#68D7AC",
						"#FF0000",
						"#d0d768"
					]
				},
				"inlineInjectorIdFold.unfoldedOpacity": {
					"type": "number",
					"order": 6,
					"description": "The opacity of the unfolded text (from 0 to 1)",
					"default": 0.7,
					"enum": [
						0,
						0.1,
						0.2,
						0.3,
						0.4,
						0.5,
						0.6,
						0.7,
						0.8,
						0.9,
						1
					]
				},
				"inlineInjectorIdFold.after": {
					"type": "string",
					"order": 7,
					"description": "(Optional) Add any text/character to be appended to the folded text",
					"default": "",
					"examples": [
						"+",
						"<-",
						"<<"
					]
				},
				"inlineInjectorIdFold.unfoldOnLineSelect": {
					"type": "boolean",
					"order": 8,
					"description": "(Optional) unfold the line when any part of the line is selected",
					"default": false
				},
				"inlineInjectorIdFold.disabledIfNoName": {
					"type": "boolean",
					"order": 9,
					"description": "Disable folding if the matched group has no name",
					"default": false
				}
			},
			"required": [
				"inlineInjectorIdFold.regex",
				"inlineInjectorIdFold.regexFlags",
				"inlineInjectorIdFold.regexGroup",
				"inlineInjectorIdFold.maskChar",
				"inlineInjectorIdFold.supportedLanguages"
			]
		},
		"jsonValidation": [
			{
				"fileMatch": "manifest.json",
				"url": "./src/manifestSchema.json"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "pnpm run compile",
		"vscode:package": "vsce package",
		"vscode:publish": "vsce publish",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./"
	},
	"devDependencies": {
		"@types/node": "^17.0.33",
		"@types/vscode": "1.68.1",
		"typescript": "4.7.4"
	},
	"__metadata": {
		"id": "4dc4b505-dda3-4ac6-b839-397f8cf0adcc",
		"publisherDisplayName": "Mohammed Alamri",
		"publisherId": "41376028-10e6-4784-aff4-9c6be1c5c66e",
		"isPreReleaseVersion": false,
		"targetPlatform": "undefined",
		"updated": true,
		"preRelease": false,
		"installedTimestamp": 1657117103571
	},
	"dependencies": {
		"vsce": "^2.15.0"
	}
}